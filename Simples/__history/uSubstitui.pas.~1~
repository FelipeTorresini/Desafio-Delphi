unit uSubstitui;

interface

uses
	uISubstitui, System.Classes, System.SysUtils;

type

	TSubstitui = class(TInterfacedObject, ISubstitui)
	public
		function Substituir(aStr, aVelho, aNovo: String): String;
	end;

implementation

function TSubstitui.Substituir(aStr, aVelho, aNovo: String): String;
var
	I, J : Integer;
	vAStr, vAuxStr, vMontaStr : String;
	vStrLst : TStringList;
begin
	try

		vStrLst := TStringList.Create;
		vStrLst.Delimiter := ' ';
		vStrLst.DelimitedText := aStr;

		for I := 0 to vStrLst.Count -1 do
		begin
			vAStr := vStrLst[I];

			for J := 0 to Length(vAStr) do
			begin
				vAuxStr := vAuxStr + trim(vAStr[J]);
				if vAuxStr = aVelho then
					vAuxStr := aNovo;
			end;

			vMontaStr := vMontaStr + ' ' + vAuxStr;
			vAuxStr := EmptyStr;
		end;

		Write(vMontaStr);

	except
    on E: Exception do
			Writeln(E.ClassName, 'Erro: ', E.Message);
	end;
end;
  
end.

